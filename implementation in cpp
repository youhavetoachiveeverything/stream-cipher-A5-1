#include <stdint.h>
#include <stdio.h>
#include <list>
#include <iostream>
#include <assert.h>

#define MAX_STEPS 250

class TheMatrix {
public:
    TheMatrix();

    uint64_t KeyMix(uint64_t);
    uint64_t KeyUnmix(uint64_t);
    uint64_t KeyMixSlow(uint64_t);

    uint64_t CountMix(uint64_t, uint64_t);
    uint64_t CountUnmix(uint64_t, uint64_t );

    uint64_t mMat1[64];
    uint64_t mMat2[64];
    uint64_t mMat3[64];
private:
    void Invert();
};

class Bidirectional {
public:
  Bidirectional();

  void ClockBack(uint64_t final, int steps, int offset1=0, int offset2=0, int offset3=0);

  uint64_t Forwards(uint64_t start, int steps, unsigned char* out);
  static uint64_t ReverseBits(uint64_t r);
  bool PopCandidate(uint64_t& c);

  void doPrintCand(bool d) {mPrintCand=d;}

private:
  void FillBack(uint64_t final);

  std::list<uint64_t> mCandidates;
  uint64_t mBack1[MAX_STEPS];
  uint64_t mBack2[MAX_STEPS];
  uint64_t mBack3[MAX_STEPS];
  bool mPrintCand;
};

Bidirectional::Bidirectional() :
    mPrintCand(true)
{
}

void Bidirectional::FillBack(uint64_t final) {
    uint64_t lfsr1 = final & 0x7ffff;
    uint64_t lfsr2 = (final>>19) & 0x3fffff;
    uint64_t lfsr3 = (final>>41) & 0x7fffff;

    /* precalculate MAX_STEPS backwards clockings of all lfsrs */
    for (int i=0; i<MAX_STEPS; i++) {
      mBack1[i] = lfsr1 & 0x7ffff;
      uint64_t bit = lfsr1 ^ (lfsr1>>18) ^ (lfsr1>>17) ^ (lfsr1>>14);
      lfsr1 = (lfsr1>>1) | ((bit&0x01)<<18);
    }

    for (int i=0; i<MAX_STEPS; i++) {
      mBack2[i] = (lfsr2 & 0x3fffff)<<19;
      uint64_t bit = lfsr2 ^ (lfsr2>>21);
      lfsr2 = (lfsr2>>1) | ((bit&0x01)<<21);
    }

    for (int i=0; i<MAX_STEPS; i++) {
      mBack3[i] = (lfsr3 & 0x7fffff)<<41;
      uint64_t bit = lfsr3 ^ (lfsr3>>22) ^ (lfsr3>>21) ^ (lfsr3>>8);
      lfsr3 = (lfsr3>>1) | ((bit&0x01)<<22);
    }

}


uint64_t  Bidirectional::Forwards(uint64_t start, int steps, unsigned char* out)
{
  unsigned int lfsr1 = start & 0x7ffff;
  unsigned int lfsr2 = (start>>19) & 0x3fffff;
  unsigned int lfsr3 = (start>>41) & 0x7fffff;


  for (int i=0; i<steps; i++) {
    /* Majority count */
    int count = ((lfsr1>>8)&0x01);
    count += ((lfsr2>>10)&0x01);
    count += ((lfsr3>>10)&0x01);
    count = count >> 1;

    
    /* Clock the different lfsr */
    if (((lfsr1>>8)&0x01)==count) {
      unsigned int val = (lfsr1&0x52000)*0x4a000;
      val ^= lfsr1<<(31-17);
      lfsr1 = 2*lfsr1 | (val>>31);
    }
    if (((lfsr2>>10)&0x01)==count) {
      unsigned int val = (lfsr2&0x300000)*0xc00;
      lfsr2 = 2*lfsr2 | (val>>31);
    }
    if (((lfsr3>>10)&0x01)==count) {
      unsigned int val = (lfsr3&0x500080)*0x1000a00;
      val ^= lfsr3<<(31-21);
      lfsr3 = 2*lfsr3 | (val>>31);
    }
  }

  
  lfsr1 = lfsr1 & 0x7ffff;
  lfsr2 = lfsr2 & 0x3fffff;
  lfsr3 = lfsr3 & 0x7fffff;
  
  uint64_t res = (uint64_t)lfsr1 | ((uint64_t)lfsr2<<19) | ((uint64_t)lfsr3<<41);
 
  return res;
}

void Bidirectional::ClockBack(uint64_t final, int steps,
                              int offset1, int offset2, int offset3) {
    if (steps>(MAX_STEPS-2)) return;
    if (steps<=0) return; 
    if ((offset1+offset2+offset3)==0) FillBack( final );

    int todo = steps > 20 ? 20 : steps;

    int limit = 2 * todo; /* Minimum number of clockings */

    for( int i=0; i<=todo; i++ ) {
        for( int j=0; j<=todo; j++ ) {
            for( int k=0; k<=todo; k++) {
                if ((i+j+k)<limit) continue;
                uint64_t test = mBack1[offset1+i] | mBack2[offset2+j]
                    | mBack3[offset3+k];
                uint64_t res = Forwards(test, todo, NULL);
                if (res == final) {
                    int remain = steps - todo;
                    if (remain>0) {
                        /* Recursion */
                        ClockBack( test, remain, offset1+i,
                                   offset2+j, offset3+k );
                    } else {
                        mCandidates.push_back(test);
                        if (mPrintCand) 
                        {
                            std::cout << "Candidate: " << 
                                std::hex << test << "\n";
                        }
                    }
                }
            }
        }
    }
}

bool Bidirectional::PopCandidate(uint64_t& c)
{
    if (mCandidates.size()>0)
    {
        c = mCandidates.back();
        mCandidates.pop_back();
        return true;
    }
    return false;
}

uint64_t Bidirectional::ReverseBits(uint64_t r)
{
    uint64_t r1 = r;
    uint64_t r2 = 0;
    for (int j = 0; j < 64 ; j++ ) {
        r2 = (r2<<1) | (r1 & 0x01);
        r1 = r1 >> 1;
    }
    return r2;
}


uint64_t reverseBits(uint64_t r)
{
    uint64_t r1 = r;
    uint64_t r2 = 0;
    for (int j = 0; j < 64 ; j++ ) {
        r2 = (r2<<1) | (r1 & 0x01);
        r1 = r1 >> 1;
    }
    return r2;
}

uint64_t parity(uint64_t r)
{
    uint64_t r1 = r;

    r = (r>>32)^r;
    r = (r>>16)^r;
    r = (r>>8)^r;
    r = (r>>4)^r;
    r = (r>>2)^r;
    r = (r>>1)^r;

    return r & 0x1;
}

TheMatrix::TheMatrix()
{
    uint64_t lfsr1[19];
    uint64_t lfsr2[22];
    uint64_t lfsr3[23];

    for (int i=0; i<19; i++) lfsr1[i]=0ULL;
    for (int i=0; i<22; i++) lfsr2[i]=0ULL;
    for (int i=0; i<23; i++) lfsr3[i]=0ULL;

    uint64_t clock_in = 1;

    for (int i=0; i<64; i++) {
        uint64_t feedback1 = lfsr1[13]^lfsr1[16]^lfsr1[17]^lfsr1[18];
        uint64_t feedback2 = lfsr2[20]^lfsr2[21];
        uint64_t feedback3 = lfsr3[7]^lfsr3[20]^lfsr3[21]^lfsr3[22];

        for (int j=18; j>0; j--) lfsr1[j]=lfsr1[j-1];
        for (int j=21; j>0; j--) lfsr2[j]=lfsr2[j-1];
        for (int j=22; j>0; j--) lfsr3[j]=lfsr3[j-1];
    
        lfsr1[0] = feedback1 ^ clock_in;
        lfsr2[0] = feedback2 ^ clock_in;
        lfsr3[0] = feedback3 ^ clock_in;

        mMat1[i] = clock_in;  /* identity */
        clock_in = clock_in + clock_in; /* shift up*/
    }

    for (int i=0; i<19; i++) mMat2[i]    = lfsr1[i];
    for (int i=0; i<22; i++) mMat2[i+19] = lfsr2[i];
    for (int i=0; i<23; i++) mMat2[i+41] = lfsr3[i];

    for (int i=0; i<64; i++) mMat3[i] = mMat2[i];  /* copy for inversion */

    Invert();
}

uint64_t TheMatrix::KeyMix(uint64_t key)
{
    uint64_t out = 0;

    for (int i=0; i< 64; i++) {
        out = (out<<1) | parity(key & mMat2[i]);
    }

    return reverseBits(out);
    // return out;
}

uint64_t TheMatrix::KeyUnmix(uint64_t mix)
{
    uint64_t out = 0;

    uint64_t b = 1;
    for (int i=0; i< 64; i++) {
        out = (out<<1) | parity(mix & mMat1[i]);
    }

    return reverseBits(out);
}

 
uint64_t TheMatrix::CountMix(uint64_t state, uint64_t count)
{
    uint64_t out;
    unsigned int lfsr1 = state & 0x7ffff;
    unsigned int lfsr2 = (state>>19) & 0x3fffff;
    unsigned int lfsr3 = (state>>41) & 0x7fffff;

    for (int i=0; i< 22; i++) {
        unsigned int bit = count & 0x01;
        count = count >> 1;

        /* Clock the different lfsr */
        unsigned int val = (lfsr1&0x52000)*0x4a000;
        val ^= lfsr1<<(31-17);
        lfsr1 = (2*lfsr1 | (val>>31)) ^ bit;

        val = (lfsr2&0x300000)*0xc00;
        lfsr2 = (2*lfsr2 | (val>>31)) ^ bit;


        val = (lfsr3&0x500080)*0x1000a00;
        val ^= lfsr3<<(31-21);
        lfsr3 = (2*lfsr3 | (val>>31)) ^ bit;

        lfsr1 = lfsr1 & 0x7ffff;
        lfsr2 = lfsr2 & 0x3fffff;
        lfsr3 = lfsr3 & 0x7fffff;
    }
    lfsr1 = lfsr1 & 0x7ffff;
    lfsr2 = lfsr2 & 0x3fffff;
    lfsr3 = lfsr3 & 0x7fffff;

    out = (uint64_t)lfsr1 | ((uint64_t)lfsr2<<19) | ((uint64_t)lfsr3<<41);
    return out;
}

uint64_t TheMatrix::CountUnmix(uint64_t state, uint64_t count)
{
    uint64_t out;
    unsigned lfsr1 = state & 0x7ffff;
    unsigned lfsr2 = (state>>19) & 0x3fffff;
    unsigned lfsr3 = (state>>41) & 0x7fffff;

    for (int i=0; i< 22; i++) {
        unsigned int bit = count >> (21-i);

        /* Clock the different lfsr - backwards */
        unsigned int low = ((lfsr1 & 0x01) ^ bit)<<31;
        lfsr1 = lfsr1 >> 1;
        unsigned int val = (lfsr1&0x52000)*0x4a000;
        val ^= lfsr1<<(31-17);
        val = val & 0x80000000;
        lfsr1 = lfsr1 | ((val^low)>>(31-18));

        low = ((lfsr2 & 0x01) ^ bit)<<31;
        lfsr2 = lfsr2 >> 1;
        val = (lfsr2&0x300000)*0xc00;
        val = val & 0x80000000;
        lfsr2 = lfsr2 | ((val^low)>>(31-21));

        low = ((lfsr3 & 0x01) ^ bit)<<31;
        lfsr3 = lfsr3 >> 1;
        val = (lfsr3&0x500080)*0x1000a00;
        val ^= lfsr3<<(31-21);
        val = val & 0x80000000;
        lfsr3 = lfsr3 | ((val^low)>>(31-22));

    }

    out = (uint64_t)lfsr1 | ((uint64_t)lfsr2<<19) | ((uint64_t)lfsr3<<41);
    return out;
}


   
void TheMatrix::Invert()
{
    int moved[64];
    for (int i=0; i<64; i++) moved[i] = 0;

    int swaps = 1;

    /* elimination */
    uint64_t b = 1ULL;
    for (int i=0; i<64; i++) {
        for (int j=i; j<64; j++) {
            if (i==j) {
                if((mMat3[j]&b)==0) {
                    bool found = false;
                    for(int k=j; k<64; k++) {
                        if (mMat3[k]&b) {
                            mMat3[j] = mMat3[j] ^ mMat3[k];
                            mMat1[j] = mMat1[j] ^ mMat1[k];
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        /* The code doesn't handle all matrices */
                        /* abort in uncompleted state */
                        printf("Trøbbel i tårnet!\n");
                        return;
                    }
                }
            } else {
                if (mMat3[j]&b) {
                    // printf("Eliminate %i -> %i\n", i, j);
                    mMat3[j] = mMat3[j] ^ mMat3[i];
                    mMat1[j] = mMat1[j] ^ mMat1[i];
                }
            }
        }
        b = b << 1;
    }

    /* elimination */
    b = 1ULL;
    for (int i=0; i<64; i++) {
        for (int j=(i-1); j>=0; j--) {
            if (mMat3[j]&b) {
                // printf("Eliminate(2) %i -> %i\n", i, j);
                mMat3[j] = mMat3[j] ^ mMat3[i];
                mMat1[j] = mMat1[j] ^ mMat1[i];
            }
        }
        b = b << 1;
    }

}

unsigned int fn2count(unsigned int fn) {
    unsigned int t1 = fn/1326;
    unsigned int t2 = fn % 26;
    unsigned int t3 = fn % 51;
    return (t1<<11)|(t3<<5)|t2;
}


int main(int argc, char* argv[])
{
    TheMatrix tm;
    Bidirectional back;

	unsigned framecount = 3811424;
    uint64_t stop = 0xa56290409b507d75;
    int pos = 37;
    
    uint64_t stop_val = Bidirectional::ReverseBits(stop);
    printf("%lx \n", stop_val);
    stop_val = back.Forwards(stop_val, 100, NULL);
    printf("%lx \n", stop_val);
    back.ClockBack( stop_val, 101+pos );
    uint64_t tst;
    int x = 0;

    while (back.PopCandidate(tst)) {
        uint64_t orig = tm.CountUnmix(tst, framecount);
        orig = tm.KeyUnmix(orig);
        printf("KC(%i): ", x);
        for(int i=7; i>=0; i--) {
            printf("%02x ",(unsigned)(orig>>(8*i))&0xff);
        }
        x++;

        printf("\n");

	}
	
	uint64_t key1 = 0xbc4448ed03040253;//0x2e61105e80935e1c;
    uint64_t orig = tm.KeyMix(key1);
    orig = tm.CountMix(orig, framecount);
    printf("orig is %lx \n", orig);


	//stop = 0xfd9f07d5b702351c;
    stop_val = back.Forwards(orig, 101+pos, NULL);
    printf("%lx \n", stop_val);
    back.ClockBack( stop_val, 100 );
	printf("\n");
	while (back.PopCandidate(tst)) {
		stop_val = Bidirectional::ReverseBits(tst);
        printf("%lx\n", stop_val);

	}
return 0;
}

